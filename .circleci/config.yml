version: 2.1
executors:
  orbing-executor:
    docker:
      - image: circleci/node:10
    environment:
      - G_CLIENT_NAME: "ginetta"
      - G_PROJECT_NAME: "orbing"
orbs:
  jq: circleci/jq@2.0.1

commands:
  display_node_info:
    description: Display node and npm informations
    steps:
      - run:
          name: npm/node information
          command: |
            echo "node/npm info:$(npm version)"
  install_openshift_client:
    description: Install OpenShift Client
    steps:
      - run:
          name: Install OpenShift Client
          command: |
            wget https://github.com/openshift/origin/releases/download/v3.9.0/openshift-origin-client-tools-v3.9.0-191fece-linux-64bit.tar.gz
            tar xvzf openshift-origin-client-tools-v3.9.0-191fece-linux-64bit.tar.gz -C /tmp
            mv /tmp/openshift-origin-client-tools-v3.9.0-191fece-linux-64bit/oc /tmp/oc
  login_to_appuio:
    description: Login to APPUiO
    steps:
      - run:
          name: Login to APPUiO
          command: |
            /tmp/oc login https://console.appuio.ch --token=$APPUIO_TOKEN
  define_variables:
    description: Defines variables for a project part
    parameters:
      app:
        description: the app to configure
        type: string
    steps:
      - jq/install
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -qq -y gettext-base
      - run:
          name: Defines banch
          command: |
            echo 'export BRANCH=$(echo $CIRCLE_BRANCH | sed s:/:-:)' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Defines environment variables
          command: |
            if [[ "${BRANCH}" == "release" ]];
            then
              echo "Setting staging env vars"
              echo "export ENVIRONMENT=staging" >> $BASH_ENV
              echo "export APPUIO_TOKEN=$G_PROD_APPUIO_TOKEN" >> $BASH_ENV
              echo "staging vars end"
            else
              echo "Setting testing env vars"
              echo "export ENVIRONMENT=testing" >> $BASH_ENV
              echo "export APPUIO_TOKEN=$G_STAGING_APPUIO_TOKEN" >> $BASH_ENV
              echo "testing vars end"
            fi
            echo "export DNS_TOKEN=$G_DNS_TOKEN" >> $BASH_ENV
            echo "export DNS_ACCOUNT_ID=$G_DNS_ACCOUNT_ID" >> $BASH_ENV
            echo "export DNS_ZONE_ID=$G_DNS_ZONE_ID" >> $BASH_ENV
            echo "export DNS_RECORD_ID=$G_DNS_RECORD_ID" >> $BASH_ENV
            echo "export APPUIO_URL=cname.appuioapp.ch" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Defines variables from config
          command: |
            source $BASH_ENV
            ../.circleci/set-app-envs.sh -e $ENVIRONMENT -a <<parameters.app>>
      - run:
          name: Defines more variables for the app
          command: |
            echo 'export IMAGE_NAME=$G_CLIENT_NAME-$G_PROJECT_NAME:$APP_NAME-$ENVIRONMENT' >> $BASH_ENV
            echo 'export REGISTERY_IMAGE=registry.appuio.ch/$APPUIO_PROJECT/$IMAGE_NAME' >> $BASH_ENV
            echo 'export APPUIO_APP_NAME=$G_CLIENT_NAME-$G_PROJECT_NAME-$ENVIRONMENT' >> $BASH_ENV
            echo 'export APPUIO_TEMPLATE=appuio_${PROJECT_TYPE}.yml' >> $BASH_ENV
  setup_appuio_project:
    description: Check and setup APPUiO project
    steps:
      - run:
          name: Check and setup APPUiO project
          command: |
            shopt -s expand_aliases
            alias oc="/tmp/oc -n $APPUIO_PROJECT"
            echo "Name of the app on appuio: $APPUIO_APP_NAME-$APP_NAME"
            if ! oc get dc $APPUIO_APP_NAME-${APP_NAME} 2>&1 > /dev/null; then
              # app does not exist yet - create new deployment
              echo "Setting up $APPUIO_APP_NAME-${APP_NAME}"
              oc process -f ../.circleci/${APPUIO_TEMPLATE} --local=true \
                -p APPUIO_PROJECT=${APPUIO_PROJECT} \
                -p CLIENT=${G_CLIENT_NAME} \
                -p PROJECT=${G_PROJECT_NAME} \
                -p PART=${APP_NAME} \
                -p IMAGE_NAME=${IMAGE_NAME} \
                -p HOSTNAME=${APP_HOSTNAME} \
                -p DEPLOY_PATH=${APP_PATH} \
                -p ENVIRONMENT=${ENVIRONMENT} \
                -p PORT=${APP_PORT} \
                | oc -n ${APPUIO_PROJECT} apply -f -
            fi
  deploy_to_appuio:
    description: Trigger deployement on APPUiO
    steps:
      - run:
          name: Trigger deployement on APPUiO
          command: |
            shopt -s expand_aliases
            alias oc="/tmp/oc -n $APPUIO_PROJECT"
            echo "Rolling out latest image"
            # deploy latest image
            oc rollout latest dc/$APPUIO_APP_NAME-${APP_NAME}
            # wait for rollout to finish and watch status
            oc rollout status dc/$APPUIO_APP_NAME-${APP_NAME} -w
  create_dns_record:
    description: Create a dnsnimple record for the project
    parameters:
      token:
        description: api token can be retrieved from dnsnimple's automation package
        type: string
        default: "$DNS_TOKEN"
      account_id:
        description: account id
        type: string
        default: "$DNS_ACCOUNT_ID"
      zone_id:
        description: Zone id or domain you want to manage
        type: string
        default: "$DNS_ZONE_ID"
      subdomain:
        description: content of the new record. For more information, please see dnsimple documentation
        type: string
        default: "$G_CLIENT_NAME-$G_PROJECT_NAME-$APP_NAME-$ENVIRONMENT"
      content:
        description: content of the new record. For more information, please see dnsimple documentation
        type: string
        default: "cname.appuioapp.ch"
    steps:
      - run:
          name: make sure all params all available
          command: |
            if [ -z << parameters.token >> ] || [ -z << parameters.account_id >> ] || [ -z << parameters.zone_id >> ] || [ -z << parameters.subdomain >> ]; then
              echo "ERROR: required variables are not specified, check your script invocation"
              exit 1
            fi
      - run:
          name: sending request
          command: |
            shopt -s expand_aliases
            status_code=$(curl --write-out %{http_code} --silent --output /dev/null --request POST "https://api.dnsimple.com/v2/<< parameters.account_id >>/zones/<< parameters.zone_id >>/records" \
            --header "Authorization: Bearer << parameters.token >>" \
            --header 'Content-Type: application/json' \
            --header 'Accept: application/json' \
            --data "{\"name\": \"<< parameters.subdomain >>\",\"type\": \"CNAME\",\"content\": \"<< parameters.content >>\",\"ttl\": \"600\"}")
            case "$status_code" in
              "201")
                echo "New record was successfully added to your domain";
                exit 0;
                ;;
              "400")
                echo "ERROR: A required parameter or the request is invalid";
                exit 1;
                ;;
              "401")
                echo "ERROR: Unauthenticated. Please make sure to add the required keys";
                exit 1;
                ;;
              "500" | "502" | "503" | "504")
                echo "Uh oh, something went wrong on DNSimpleâ€™s end";
                exit 1;
                ;;    
            esac
  # create_dns_record:
  #   description: Create a dns record for the project
  #   steps:
  #     - run:
  #         name: Create a dns record for the project
  #         command: |
  #           shopt -s expand_aliases
  #           ../.circleci/updatedns.sh "$DNS_TOKEN" "$DNS_ACCOUNT_ID" "$DNS_ZONE_ID" "$DNS_RECORD_ID" "$G_CLIENT_NAME-$G_PROJECT_NAME-$APP_NAME-$ENVIRONMENT"

jobs:
  build-website:
    executor: orbing-executor
    working_directory: /tmp/ci-orbing/website
    steps:
      - checkout:
          path: /tmp/ci-orbing
      - display_node_info
      - run:
          name: Install dependencies
          command: npm ci
      - run:
          name: Build Next.js
          command: npm run build
      - persist_to_workspace:
          root: /tmp/ci-orbing/website
          paths:
            - .next
  deploy-website:
    executor: orbing-executor
    working_directory: /tmp/ci-orbing/website

    steps:
      - checkout:
          path: /tmp/ci-orbing
      - display_node_info
      - attach_workspace:
          at: /tmp/ci-orbing/website
      - setup_remote_docker
      - run:
          name: Defines project part variables
          command: |
            echo 'export APP_NAME=web' >> $BASH_ENV
            echo 'export PROJECT_TYPE=web' >> $BASH_ENV
      - define_variables:
          app: $APP_NAME
      - run:
          name: Build and push Docker image
          command: |
            docker login -u serviceaccount -p $APPUIO_TOKEN https://registry.appuio.ch
            docker build --cache-from $REGISTERY_IMAGE \
              -t $REGISTERY_IMAGE .
            docker push $REGISTERY_IMAGE
      - install_openshift_client
      - login_to_appuio
      - setup_appuio_project
      - deploy_to_appuio
      - create_dns_record
workflows:
  version: 2
  pipeline:
    jobs:
      - build-website
      - deploy-website:
          requires:
            - build-website
          filters:
            branches:
              only:
                - master
